
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND COMMA DIV DTYPE EQUALS FOR GREATER ID LBRACE LESSER LFLOWER MINUS MUL NOT NUMBER OR PLUS RBRACE RFLOWER SEMICOLON SHORTHAND\n    for_statement     : FOR LBRACE initialization  SEMICOLON conditions SEMICOLON iteration RBRACE LFLOWER statements RFLOWER\n                      | FOR LBRACE initialization  SEMICOLON conditions SEMICOLON iteration RBRACE singleStatement \n    \n    initialization  : DTYPE ID EQUALS NUMBER\n                    |\n    \n    conditions  : ID EQUALS data \n                | ID GREATER data \n                | ID LESSER data \n                | ID GREATER EQUALS data \n                | ID LESSER EQUALS data \n                | ID NOT EQUALS data\n                | conditions AND conditions \n                | conditions OR conditions\n                | data\n                |\n    \n    data : ID \n        | NUMBER\n    \n    iteration  : ID EQUALS ID PLUS NUMBER \n               | ID EQUALS ID MINUS NUMBER \n               | ID EQUALS ID MUL NUMBER \n               | ID EQUALS ID DIV NUMBER\n               | ID SHORTHAND\n               |\n    \n    statements  : statements statement\n                | statement\n    \n    statement   : list SEMICOLON\n                | for_statement\n                | empty\n    \n    singleStatement  : list SEMICOLON \n                    | empty\n                    | for_statement\n    \n    list    : ID list\n            | ID\n    \n    empty :\n    '
    
_lr_action_items = {'FOR':([0,32,38,39,41,42,45,46,48,49,50,56,57,58,],[2,2,2,-2,-29,-30,2,-24,-26,-27,-28,-1,-23,-25,]),'$end':([1,32,39,41,42,50,56,],[0,-33,-2,-29,-30,-28,-1,]),'LBRACE':([2,],[3,]),'DTYPE':([3,],[5,]),'SEMICOLON':([3,4,6,8,9,10,11,14,15,20,23,24,25,26,27,29,35,36,37,40,43,47,51,],[-4,6,-14,13,-15,-13,-16,-14,-14,-3,-11,-12,-15,-5,-6,-7,-8,-9,-10,50,-32,58,-31,]),'ID':([5,6,13,14,15,16,17,18,28,30,31,32,33,38,39,41,42,43,45,46,48,49,50,56,57,58,],[7,9,22,9,9,25,25,25,25,25,25,43,44,43,-2,-29,-30,43,43,-24,-26,-27,-28,-1,-23,-25,]),'AND':([6,8,9,10,11,14,15,23,24,25,26,27,29,35,36,37,],[-14,14,-15,-13,-16,-14,-14,14,14,-15,-5,-6,-7,-8,-9,-10,]),'OR':([6,8,9,10,11,14,15,23,24,25,26,27,29,35,36,37,],[-14,15,-15,-13,-16,-14,-14,15,15,-15,-5,-6,-7,-8,-9,-10,]),'NUMBER':([6,12,14,15,16,17,18,28,30,31,52,53,54,55,],[11,20,11,11,11,11,11,11,11,11,59,60,61,62,]),'EQUALS':([7,9,17,18,19,22,],[12,16,28,30,31,33,]),'GREATER':([9,],[17,]),'LESSER':([9,],[18,]),'NOT':([9,],[19,]),'RBRACE':([13,21,34,59,60,61,62,],[-22,32,-21,-17,-18,-19,-20,]),'SHORTHAND':([22,],[34,]),'LFLOWER':([32,],[38,]),'RFLOWER':([32,38,39,41,42,45,46,48,49,50,56,57,58,],[-33,-33,-2,-29,-30,56,-24,-26,-27,-28,-1,-23,-25,]),'PLUS':([44,],[52,]),'MINUS':([44,],[53,]),'MUL':([44,],[54,]),'DIV':([44,],[55,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'for_statement':([0,32,38,45,],[1,42,48,48,]),'initialization':([3,],[4,]),'conditions':([6,14,15,],[8,23,24,]),'data':([6,14,15,16,17,18,28,30,31,],[10,10,10,26,27,29,35,36,37,]),'iteration':([13,],[21,]),'singleStatement':([32,],[39,]),'list':([32,38,43,45,],[40,47,51,47,]),'empty':([32,38,45,],[41,49,49,]),'statements':([38,],[45,]),'statement':([38,45,],[46,57,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> for_statement","S'",1,None,None,None),
  ('for_statement -> FOR LBRACE initialization SEMICOLON conditions SEMICOLON iteration RBRACE LFLOWER statements RFLOWER','for_statement',11,'p_while','parser.py',8),
  ('for_statement -> FOR LBRACE initialization SEMICOLON conditions SEMICOLON iteration RBRACE singleStatement','for_statement',9,'p_while','parser.py',9),
  ('initialization -> DTYPE ID EQUALS NUMBER','initialization',4,'p_initialization','parser.py',19),
  ('initialization -> <empty>','initialization',0,'p_initialization','parser.py',20),
  ('conditions -> ID EQUALS data','conditions',3,'p_conditions','parser.py',25),
  ('conditions -> ID GREATER data','conditions',3,'p_conditions','parser.py',26),
  ('conditions -> ID LESSER data','conditions',3,'p_conditions','parser.py',27),
  ('conditions -> ID GREATER EQUALS data','conditions',4,'p_conditions','parser.py',28),
  ('conditions -> ID LESSER EQUALS data','conditions',4,'p_conditions','parser.py',29),
  ('conditions -> ID NOT EQUALS data','conditions',4,'p_conditions','parser.py',30),
  ('conditions -> conditions AND conditions','conditions',3,'p_conditions','parser.py',31),
  ('conditions -> conditions OR conditions','conditions',3,'p_conditions','parser.py',32),
  ('conditions -> data','conditions',1,'p_conditions','parser.py',33),
  ('conditions -> <empty>','conditions',0,'p_conditions','parser.py',34),
  ('data -> ID','data',1,'p_data','parser.py',39),
  ('data -> NUMBER','data',1,'p_data','parser.py',40),
  ('iteration -> ID EQUALS ID PLUS NUMBER','iteration',5,'p_iteration','parser.py',46),
  ('iteration -> ID EQUALS ID MINUS NUMBER','iteration',5,'p_iteration','parser.py',47),
  ('iteration -> ID EQUALS ID MUL NUMBER','iteration',5,'p_iteration','parser.py',48),
  ('iteration -> ID EQUALS ID DIV NUMBER','iteration',5,'p_iteration','parser.py',49),
  ('iteration -> ID SHORTHAND','iteration',2,'p_iteration','parser.py',50),
  ('iteration -> <empty>','iteration',0,'p_iteration','parser.py',51),
  ('statements -> statements statement','statements',2,'p_statements','parser.py',58),
  ('statements -> statement','statements',1,'p_statements','parser.py',59),
  ('statement -> list SEMICOLON','statement',2,'p_statement','parser.py',68),
  ('statement -> for_statement','statement',1,'p_statement','parser.py',69),
  ('statement -> empty','statement',1,'p_statement','parser.py',70),
  ('singleStatement -> list SEMICOLON','singleStatement',2,'p_singleStatement','parser.py',76),
  ('singleStatement -> empty','singleStatement',1,'p_singleStatement','parser.py',77),
  ('singleStatement -> for_statement','singleStatement',1,'p_singleStatement','parser.py',78),
  ('list -> ID list','list',2,'p_list','parser.py',84),
  ('list -> ID','list',1,'p_list','parser.py',85),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',90),
]
