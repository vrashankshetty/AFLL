
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ABSTRACT COMMA DTYPE ID LBRACE LFLOWER OVERRIDE PARTIAL PRIVATE PROTECTED PUBLIC RBRACE RFLOWER SEALED SEMICOLON STATIC VIRTUAL\n    funcDefinition  : accessModifier methodSpecifier DTYPE funcname LBRACE params RBRACE LFLOWER statements RFLOWER \n                    | accessModifier DTYPE funcname LBRACE params RBRACE LFLOWER statements RFLOWER\n    \n    accessModifier : PUBLIC\n                   | PROTECTED \n                   | PRIVATE \n                   | \n    \n    methodSpecifier : STATIC \n                    | OVERRIDE \n                    | SEALED \n                    | PARTIAL \n                    | ABSTRACT \n                    | VIRTUAL \n                    |\n    \n    funcname : ID\n    \n    params : DTYPE ID COMMA params \n           | DTYPE ID \n           |\n    \n    statements  : statements statement \n                | statement \n                |\n    \n    statement   : list SEMICOLON \n    \n    list    : ID list\n            | ID\n            \n    '
    
_lr_action_items = {'PUBLIC':([0,],[3,]),'PROTECTED':([0,],[4,]),'PRIVATE':([0,],[5,]),'DTYPE':([0,2,3,4,5,6,8,9,10,11,12,13,18,19,26,],[-6,7,-3,-4,-5,14,-7,-8,-9,-10,-11,-12,20,20,20,]),'STATIC':([0,2,3,4,5,],[-6,8,-3,-4,-5,]),'OVERRIDE':([0,2,3,4,5,],[-6,9,-3,-4,-5,]),'SEALED':([0,2,3,4,5,],[-6,10,-3,-4,-5,]),'PARTIAL':([0,2,3,4,5,],[-6,11,-3,-4,-5,]),'ABSTRACT':([0,2,3,4,5,],[-6,12,-3,-4,-5,]),'VIRTUAL':([0,2,3,4,5,],[-6,13,-3,-4,-5,]),'$end':([1,35,39,],[0,-2,-1,]),'ID':([7,14,20,27,28,30,31,33,34,36,37,],[16,16,23,33,33,33,-19,33,33,-18,-21,]),'LBRACE':([15,16,17,],[18,-14,19,]),'RBRACE':([18,19,21,22,23,26,29,],[-17,-17,24,25,-16,-17,-15,]),'COMMA':([23,],[26,]),'LFLOWER':([24,25,],[27,28,]),'RFLOWER':([27,28,30,31,34,36,37,],[-20,-20,35,-19,39,-18,-21,]),'SEMICOLON':([32,33,38,],[37,-23,-22,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'funcDefinition':([0,],[1,]),'accessModifier':([0,],[2,]),'methodSpecifier':([2,],[6,]),'funcname':([7,14,],[15,17,]),'params':([18,19,26,],[21,22,29,]),'statements':([27,28,],[30,34,]),'statement':([27,28,30,34,],[31,31,36,36,]),'list':([27,28,30,33,34,],[32,32,32,38,32,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> funcDefinition","S'",1,None,None,None),
  ('funcDefinition -> accessModifier methodSpecifier DTYPE funcname LBRACE params RBRACE LFLOWER statements RFLOWER','funcDefinition',10,'p_funcDefinition','parser.py',8),
  ('funcDefinition -> accessModifier DTYPE funcname LBRACE params RBRACE LFLOWER statements RFLOWER','funcDefinition',9,'p_funcDefinition','parser.py',9),
  ('accessModifier -> PUBLIC','accessModifier',1,'p_accessModifier','parser.py',18),
  ('accessModifier -> PROTECTED','accessModifier',1,'p_accessModifier','parser.py',19),
  ('accessModifier -> PRIVATE','accessModifier',1,'p_accessModifier','parser.py',20),
  ('accessModifier -> <empty>','accessModifier',0,'p_accessModifier','parser.py',21),
  ('methodSpecifier -> STATIC','methodSpecifier',1,'p_methodSpecifier','parser.py',30),
  ('methodSpecifier -> OVERRIDE','methodSpecifier',1,'p_methodSpecifier','parser.py',31),
  ('methodSpecifier -> SEALED','methodSpecifier',1,'p_methodSpecifier','parser.py',32),
  ('methodSpecifier -> PARTIAL','methodSpecifier',1,'p_methodSpecifier','parser.py',33),
  ('methodSpecifier -> ABSTRACT','methodSpecifier',1,'p_methodSpecifier','parser.py',34),
  ('methodSpecifier -> VIRTUAL','methodSpecifier',1,'p_methodSpecifier','parser.py',35),
  ('methodSpecifier -> <empty>','methodSpecifier',0,'p_methodSpecifier','parser.py',36),
  ('funcname -> ID','funcname',1,'p_funcname','parser.py',43),
  ('params -> DTYPE ID COMMA params','params',4,'p_params','parser.py',50),
  ('params -> DTYPE ID','params',2,'p_params','parser.py',51),
  ('params -> <empty>','params',0,'p_params','parser.py',52),
  ('statements -> statements statement','statements',2,'p_statements','parser.py',64),
  ('statements -> statement','statements',1,'p_statements','parser.py',65),
  ('statements -> <empty>','statements',0,'p_statements','parser.py',66),
  ('statement -> list SEMICOLON','statement',2,'p_statement','parser.py',77),
  ('list -> ID list','list',2,'p_list','parser.py',86),
  ('list -> ID','list',1,'p_list','parser.py',87),
]
